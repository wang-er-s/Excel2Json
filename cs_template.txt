using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Framework;

public partial class #class_name : BaseConfig
{
    #fields
}

[Config("#load_config_path")]
public partial class #class_nameFactory : ConfigSingleton<#class_nameFactory>
{
    private Dictionary<int, #class_name> dict = new Dictionary<int, #class_name>();

    [MongoDB.Bson.Serialization.Attributes.BsonElement]
    private List<#class_name> list = new List<#class_name>();

    public void Merge(#class_nameFactory o)
    {
        this.list.AddRange(o.list);
    }

    public override void EndInit()
    {
        foreach (#class_name config in list)
        {
            this.dict.Add(config.ID, config);
        }

        this.list.Clear();

        this.AfterEndInit();
    }
	
	partial void AfterEndInit();

    public #class_name Get(int id)
    {
        this.dict.TryGetValue(id, out #class_name #class_name);

        if (#class_name == null)
        {
            throw new Exception($"配置找不到，配置表名: {nameof(#class_name)}，配置id: {id}");
        }

        return #class_name;
    }

    public bool Contain(int id)
    {
        return this.dict.ContainsKey(id);
    }

    public IReadOnlyDictionary<int, #class_name> GetAll()
    {
        return this.dict;
    }

    public #class_name GetOne()
    {
        if (this.dict == null || this.dict.Count <= 0)
        {
            return null;
        }

        return list.GetRandomValue();
    }
}